{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/basicForm/basicForm.component.html","webpack:///./src/app/basicForm/basicForm.component.ts","webpack:///./src/app/controlValueAccessor/component-styles.css","webpack:///./src/app/controlValueAccessor/controlValueAccessor.component.html","webpack:///./src/app/controlValueAccessor/controlValueAccessor.component.ts","webpack:///./src/app/controlValueAccessor/phone-textbox.component.ts","webpack:///./src/app/controlValueAccessor/required-textbox.component.ts","webpack:///./src/app/reactiveDynamicForm/reactive-dynamic-form.component.html","webpack:///./src/app/reactiveDynamicForm/reactive-dynamic-form.component.ts","webpack:///./src/app/reactiveForm/reactiveForm.component.html","webpack:///./src/app/reactiveForm/reactiveForm.component.ts","webpack:///./src/app/shared/camel-to-title.pipe.ts","webpack:///./src/app/shared/hero.ts","webpack:///./src/app/shared/validation.service.ts","webpack:///./src/app/starterReactiveForm/starterReactiveForm.component.html","webpack:///./src/app/starterReactiveForm/starterReactiveForm.component.ts","webpack:///./src/app/starterTemplateForm/starterTemplateForm.component.html","webpack:///./src/app/starterTemplateForm/starterTemplateForm.component.ts","webpack:///./src/app/templateForm/templateForm.component.html","webpack:///./src/app/templateForm/templateForm.component.ts","webpack:///./src/app/updateOn/updateOn.component.html","webpack:///./src/app/updateOn/updateOn.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BasicFormComponent } from './basicForm/basicForm.component';\nimport { TemplateFormComponent } from './templateForm/templateForm.component';\nimport { ReactiveFormComponent } from './reactiveForm/reactiveForm.component';\nimport { StarterTemplateFormComponent } from './starterTemplateForm/starterTemplateForm.component';\nimport { StarterReactiveFormComponent } from './starterReactiveForm/starterReactiveForm.component';\nimport { UpdateOnComponent } from './updateOn/updateOn.component';\nimport { ControlValueAccessorComponent } from './controlValueAccessor/controlValueAccessor.component';\nimport { ReactiveDynamicFormComponent } from './reactiveDynamicForm/reactive-dynamic-form.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch:'full', redirectTo: '/startertemplateform' },\n  { path: 'startertemplateform', component: StarterTemplateFormComponent    },\n  { path: 'starterreactiveform', component: StarterReactiveFormComponent },\n  { path: 'basicform',  component: BasicFormComponent },\n  { path: 'templateform',  component: TemplateFormComponent },\n  { path: 'reactiveform',     component: ReactiveFormComponent  },\n  { path: 'updateon', component: UpdateOnComponent },\n  { path: 'controlvalueaccessor', component: ControlValueAccessorComponent },\n  { path: 'reactivedynamicform', component: ReactiveDynamicFormComponent }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule {\n  static components = [ \n    StarterTemplateFormComponent, StarterReactiveFormComponent,\n    BasicFormComponent, TemplateFormComponent, ReactiveFormComponent,\n    ControlValueAccessorComponent, UpdateOnComponent, ReactiveDynamicFormComponent\n  ];\n}\n\n","module.exports = \"\\n  <nav class=\\\"navbar navbar-default\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <a href=\\\"#/\\\"><img src=\\\"assets/angular.png\\\" class=\\\"logo\\\" /></a>\\n    </div>\\n    <ul class=\\\"nav navbar-nav nav-pills\\\">\\n      <li routerLinkActive=\\\"active\\\">\\n        <a routerLink=\\\"/startertemplateform\\\">Starter Template Form</a>\\n      </li>\\n      <li routerLinkActive=\\\"active\\\">\\n        <a routerLink=\\\"/starterreactiveform\\\">Starter Reactive Form</a>\\n      </li>\\n      <li routerLinkActive=\\\"active\\\">\\n        <a routerLink=\\\"/basicform\\\">Basic Template Form</a>\\n      </li>\\n      <li routerLinkActive=\\\"active\\\">\\n        <a routerLink=\\\"/templateform\\\">Template Form</a>\\n      </li>\\n      <li routerLinkActive=\\\"active\\\">\\n        <a routerLink=\\\"/reactiveform\\\">Reactive Form</a>\\n      </li>\\n      <li routerLinkActive=\\\"active\\\">\\n        <a routerLink=\\\"/reactivedynamicform\\\">Reactive Dynamic Form</a>\\n      </li>\\n      <li routerLinkActive=\\\"active\\\">\\n        <a routerLink=\\\"/controlvalueaccessor\\\">Custom Components</a>\\n      </li>\\n      <li routerLinkActive=\\\"active\\\">\\n        <a routerLink=\\\"/updateon\\\">Update On</a>\\n      </li>\\n    </ul>\\n  </nav>\\n  \\n  <main>\\n    <router-outlet></router-outlet>\\n  </main>\\n  \\n\"","import { Component } from '@angular/core';\n\n@Component({ \n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent { \n  \n  constructor() {\n\n  }\n  \n}\n","import { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { RequiredTextboxComponent } from './controlValueAccessor/required-textbox.component';\nimport { PhoneTextboxComponent } from './controlValueAccessor/phone-textbox.component';\nimport { CamelToTitlePipe } from './shared/camel-to-title.pipe';\n\n@NgModule({\n  imports:      [ BrowserModule, FormsModule, ReactiveFormsModule, AppRoutingModule ],\n  declarations: [ AppComponent, AppRoutingModule.components, RequiredTextboxComponent, PhoneTextboxComponent, CamelToTitlePipe ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }","module.exports = \"<div class=\\\"container\\\">\\n  <div *ngIf=\\\"!submitted\\\">\\n    <h1>Basic Template Driven Form</h1>\\n    <form #heroForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(heroForm.value)\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" ngModel #name=\\\"ngModel\\\" required>\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"name.valid || name.pristine\\\">Name is required</div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"alterEgo\\\">Alter Ego</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"alterEgo\\\" ngModel #alterEgo=\\\"ngModel\\\" required>\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"alterEgo.valid || alterEgo.pristine\\\">Alter Ego is required</div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"power\\\">Hero Power</label>\\n        <select class=\\\"form-control\\\" name=\\\"power\\\" ngModel #power=\\\"ngModel\\\" required>\\n          <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{ p }}</option>\\n        </select>\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"power.valid || power.pristine\\\">Power is required</div>\\n      </div>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button>\\n    </form>\\n  </div>\\n  <div *ngIf=\\\"submitted\\\">\\n    <h2>You submitted the following:</h2>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-2\\\">Name</div>\\n      <div class=\\\"col-md-10 pull-left\\\">{{ form.name }}</div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-2\\\">Alter Ego</div>\\n      <div class=\\\"col-md-10 pull-left\\\">{{ form.alterEgo }}</div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-2\\\">Power</div>\\n      <div class=\\\"col-md-10 pull-left\\\">{{ form.power }}</div>\\n    </div>\\n    <br />\\n    Raw output from form.value:\\n    <br />\\n    {{ form | json }}\\n    <br /><br />\\n    <button class=\\\"btn btn-default\\\" (click)=\\\"submitted=false\\\">Edit</button>\\n  </div>\\n</div>\"","import { Component, OnInit, Host } from '@angular/core';\n\n@Component({\n  selector: 'basic-template-driven-form',\n  templateUrl: './basicForm.component.html'\n})\nexport class BasicFormComponent implements OnInit {\n  form: any;\n  powers: string[];\n  submitted: boolean = false;\n  \n  constructor() { }\n  \n  ngOnInit() {\n    this.powers = ['Really Smart', 'Turbulent Breeze', \n                'Super Hot', 'Weather Changer'];\n  }\n\n  onSubmit(form: any)  {\n    this.submitted = true;\n    this.form = form;\n  }\n}","module.exports = \":host(.ng-invalid) input {\\n    border-left: 5px solid #a94442;\\n  }\\n  \\n:host(.ng-valid) input {\\n    border-left: 5px solid #42A948;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29udHJvbFZhbHVlQWNjZXNzb3IvY29tcG9uZW50LXN0eWxlcy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSwrQkFBK0I7R0FDaEM7O0FBRUg7SUFDSSwrQkFBK0I7Q0FDbEMiLCJmaWxlIjoic3JjL2FwcC9jb250cm9sVmFsdWVBY2Nlc3Nvci9jb21wb25lbnQtc3R5bGVzLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0KC5uZy1pbnZhbGlkKSBpbnB1dCB7XG4gICAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCAjYTk0NDQyO1xuICB9XG4gIFxuOmhvc3QoLm5nLXZhbGlkKSBpbnB1dCB7XG4gICAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCAjNDJBOTQ4O1xufSJdfQ== */\"","module.exports = \"<h1>Customer Edit</h1>\\n<form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <label>Name</label>\\n        <required-textbox formControlName=\\\"name\\\"></required-textbox>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"customerForm.controls.name.invalid\\\">First Name is required!</div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label>Phone</label>\\n        <phone-textbox formControlName=\\\"phone\\\"></phone-textbox>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"customerForm.controls.phone.errors?.required\\\">Enter a phone number!</div>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"customerForm.controls.phone.errors?.phone\\\">Enter a valid phone number!</div>\\n    </div>\\n    <br />\\n    <button class=\\\"btn btn-default\\\" [disabled]=\\\"customerForm.invalid\\\">Submit</button>\\n    <br /><br />\\n    {{ message }}\\n    <br /><br />\\n    Valid: {{ customerForm.valid}}\\n    <br />\\n    Pristine: {{ customerForm.pristine }}\\n    <br />\\n    Touched: {{ customerForm.touched }}\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'control-value-accessor',\n    templateUrl: 'controlValueAccessor.component.html'\n})\nexport class ControlValueAccessorComponent implements OnInit {\n\n    customerForm: FormGroup;\n    customer: any;\n    message: string;\n    constructor(private formBuilder: FormBuilder) { }\n\n    ngOnInit() { \n        this.customer = {\n            firstName: 'Tina Reactive',\n            phone: '123-123-1234'\n        };\n\n        this.customerForm = this.formBuilder.group({\n            name: [this.customer.firstName ],\n            phone: [this.customer.phone ]\n        });\n    }\n\n    submit() {\n        this.message = 'You entered: ' + \n                        this.customerForm.controls.name.value + ' ' + \n                        this.customerForm.controls.phone.value;\n    }\n\n}","import { Component, Output, EventEmitter, forwardRef, OnChanges } from \"@angular/core\";\nimport { NgControl, ControlValueAccessor, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormControl, Validators } from \"@angular/forms\";\nimport { AbstractControl } from \"@angular/forms/src/model\";\nimport { ValidationErrors } from \"@angular/forms/src/directives/validators\";\n\n@Component({ \n    selector: 'phone-textbox', \n    template: `\n        <input type=\"text\" class=\"form-control\" [value]=\"value\" \n               (input)=\"onChange($event.target.value)\" \n               (blur)=\"onTouched($event)\" [disabled]=\"disabled\" />\n    `,\n    styleUrls: ['./component-styles.css'],\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PhoneTextboxComponent), multi: true },\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => PhoneTextboxComponent), multi: true }\n    ]\n})\nexport class PhoneTextboxComponent implements ControlValueAccessor {\n    private onChange = (_: any) => { };\n    private onTouched = (_: any) => { };\n    private onValidate = (_: any) => { };\n    value: string;\n    disabled = false;\n\n    constructor() {  }\n\n    writeValue(value: any) { this.value = value; }\n\n    registerOnChange(fn: (value: any) => void) { this.onChange = fn; }\n\n    registerOnTouched(fn: any) { this.onTouched = fn; }    \n\n    setDisabledState(disabled: boolean) { this.disabled = disabled; }\n\n    validate(ctrl: AbstractControl) : ValidationErrors { \n        let requiredErrors = Validators.required(ctrl);\n        let patternErrors = Validators.pattern(/^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/)(ctrl);\n        if (!requiredErrors && !patternErrors) {\n            return null;\n        }\n\n        return {\n          required: requiredErrors,\n          phone: patternErrors\n        };\n    }\n}","import { Component, Output, EventEmitter, forwardRef } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, AbstractControl, Validators, NG_VALIDATORS } from \"@angular/forms\";\n\n@Component({ \n    selector: 'required-textbox', \n    template: `\n        <input type=\"text\" class=\"form-control\" [value]=\"value\" \n               (input)=\"onChange($event.target.value)\" \n               (blur)=\"onTouched($event)\" [disabled]=\"disabled\" />\n    `,\n    styleUrls: ['./component-styles.css'],\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RequiredTextboxComponent), multi: true },\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => RequiredTextboxComponent), multi: true }\n    ]\n})\nexport class RequiredTextboxComponent implements ControlValueAccessor {\n    private onChange = (_: any) => { };\n    private onTouched = (_: any) => { };\n    value: string;\n    disabled = false;\n\n    constructor() {  }\n\n    writeValue(value: any) { this.value = value; }\n\n    registerOnChange(fn: (value: any) => void) { this.onChange = fn; }\n\n    registerOnTouched(fn: any) { this.onTouched = fn; }\n\n    setDisabledState(disabled: boolean) { this.disabled = disabled; }\n\n    validate(ctrl: AbstractControl) { return Validators.required(ctrl); }\n}","module.exports = \"<div *ngIf=\\\"!submitted\\\">\\n    <form [formGroup]=\\\"heroForm\\\" (ngSubmit)=\\\"submit()\\\">\\n        <div *ngFor=\\\"let prop of formModelProps\\\">\\n            <div class=\\\"form-group\\\" *ngIf=\\\"prop !== 'id'\\\">\\n                <label for=\\\"name\\\">{{ prop | cameltotitle }}</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [formControlName]=\\\"prop\\\" />\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.get(prop).valid\\\">{{ prop }} is required</div>\\n            </div>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button> \\n    </form>\\n</div>\\n\\n<div *ngIf=\\\"submitted\\\">\\n    <h2>You submitted the following:</h2>\\n    <div *ngFor=\\\"let prop of formModelProps\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">{{ prop | cameltotitle }}</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ heroForm.get(prop).value }}</div>\\n        </div>\\n    </div>\\n    <br />\\n    <button class=\\\"btn btn-default\\\" (click)=\\\"submitted=false\\\">Edit</button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Hero } from '../shared/hero';\nimport { FormGroup } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { ValidationService } from '../shared/validation.service';\n\n@Component({\n    selector: 'reactive-dynamic',\n    templateUrl: 'reactive-dynamic-form.component.html'\n})\nexport class ReactiveDynamicFormComponent implements OnInit {\n    model: Hero;\n    heroForm: FormGroup;\n    formModelProps = [];\n    submitted: boolean;\n\n    constructor() { }\n\n    ngOnInit() { \n        this.model = new Hero(18, 'Dr IQ', 'Really Smart', 'Chuck Overstreet', 'iq@superhero.com');\n\n        const formModel = {};\n        let validators = [ Validators.required ];\n        for (const prop of Object.keys(this.model)) {\n            if (prop.indexOf('email') !== -1) validators.push(ValidationService.emailValidator);\n            formModel[prop] = new FormControl(this.model[prop], validators);\n            this.formModelProps.push(prop);\n        }\n        this.heroForm = new FormGroup(formModel);\n    }\n\n    submit() {\n        this.submitted = true;\n    }\n\n}","module.exports = \"<div class=\\\"container\\\">\\n    <div *ngIf=\\\"!submitted\\\">\\n        <h1>Reactive Form</h1>\\n        <form [formGroup]=\\\"heroForm\\\" (ngSubmit)=\\\"onSubmit(heroForm)\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"name\\\">Name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" />\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.name.valid\\\">Name is required</div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"alterEgo\\\">Alter Ego</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"alterEgo\\\" />\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.alterEgo.valid\\\">Alter Ego is required</div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"email\\\">Hero Email</label>\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.email.valid\\\">Email is required and must be a valid email pattern</div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"power\\\">Hero Power</label>\\n                <select class=\\\"form-control\\\" formControlName=\\\"power\\\">\\n                  <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{p}}</option>\\n                </select>\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.power.valid\\\">Power is required</div>\\n            </div>\\n            <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button> \\n        </form>  \\n    </div>\\n                                \\n    <div *ngIf=\\\"submitted\\\">\\n        <h2>You submitted the following:</h2>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">Name</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.name }}</div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">Alter Ego</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.alterEgo }}</div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">Hero Email</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.email }}</div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">Power</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.power }}</div>\\n        </div>\\n        <br />\\n        <button class=\\\"btn btn-default\\\" (click)=\\\"submitted=false\\\">Edit</button>\\n    </div>    \\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { ValidationService } from '../shared/validation.service';\nimport { Hero } from '../shared/hero';\n\n@Component({\n  selector: 'reactive-driven-form',\n  templateUrl: './reactiveForm.component.html'\n})\nexport class ReactiveFormComponent implements OnInit {\n  heroForm: FormGroup;\n  model: Hero; \n  submittedModel: Hero; \n  powers: string[];\n  submitted: boolean = false;\n  \n  constructor(private formBuilder: FormBuilder) { }\n  \n  ngOnInit() {\n      this.model = new Hero(18, 'Dr IQ', 'Really Smart', 'Chuck Overstreet', 'iq@superhero.com');\n      \n      this.powers = ['Really Smart', 'Super Flexible', \n                     'Hypersound', 'Weather Changer'];                     \n                     \n      this.heroForm = this.formBuilder.group({\n        name:     [this.model.name, Validators.required],\n        alterEgo: [this.model.alterEgo, Validators.required],\n        email:    [this.model.email, [Validators.required, ValidationService.emailValidator]],\n        power:    [this.model.power, Validators.required]\n      });\n  }\n\n  onSubmit({ value, valid }: { value: Hero, valid: boolean }) {\n    this.submitted = true;\n    this.submittedModel = value;\n  }\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'cameltotitle'\n})\nexport class CamelToTitlePipe implements PipeTransform {\n\n    transform(value: string) {\n        let newVal = value.replace(/([A-Z]+)/g, \" $1\").replace(/([A-Z][a-z])/g, \" $1\");\n        newVal = newVal.charAt(0).toUpperCase() + newVal.slice(1);\n        return newVal;\n    }\n\n}","export class Hero {\n\n  constructor(\n    public id?: number,\n    public name?: string,\n    public power?: string,\n    public alterEgo?: string,\n    public email?: string) {\n\n  }\n\n}\n","//Original version created by Cory Rylan: https://coryrylan.com/blog/angular-2-form-builder-and-validation-management\nimport { AbstractControl } from '@angular/forms';\n\nexport class ValidationService {\n     \n    static getValidatorErrorMessage(code: string) {\n        let config = {\n            'required': 'Required',\n            'invalidCreditCard': 'Is invalid credit card number',\n            'invalidEmailAddress': 'Invalid email address',\n            'invalidPassword': 'Invalid password. Password must be at least 6 characters long, and contain a number.'\n        };\n        return config[code];\n    }\n\n    static creditCardValidator(control: AbstractControl) {\n        // Visa, MasterCard, American Express, Diners Club, Discover, JCB\n        if (control.value.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\n            return null;\n        } else {\n            return { 'invalidCreditCard': true };\n        }\n    }\n     \n    static emailValidator(control: AbstractControl) {\n        // RFC 2822 compliant regex\n        if (control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n            return null;\n        } else {\n            return { 'invalidEmailAddress': true };\n        }\n    }\n     \n    static passwordValidator(control: AbstractControl) {\n        // {6,100}           - Assert password is between 6 and 100 characters\n        // (?=.*[0-9])       - Assert a string has at least one number\n        if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n            return null;\n        } else {\n            return { 'invalidPassword': true };\n        }\n    }\n}","module.exports = \"<h1>Customer Edit</h1>\\n<form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"onSubmit(customerForm)\\\">\\n    First Name:\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"firstName\\\" />\\n    <br />\\n    <span *ngIf=\\\"customerForm.controls.firstName.invalid\\\">First Name is required!</span>\\n    <br />\\n    <button class=\\\"btn btn-default\\\" [disabled]=\\\"customerForm.invalid\\\">Submit</button>\\n    <br />\\n    {{ message }}\\n    <br />\\n    Valid: {{ customerForm.valid}}\\n    <br />\\n    Pristine: {{ customerForm.pristine }}\\n    <br />\\n    Touched: {{ customerForm.touched }}\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'starter-reactive-form',\n    templateUrl: './starterReactiveForm.component.html'\n})\nexport class StarterReactiveFormComponent implements OnInit {\n    customerForm: FormGroup;\n    customer: any;\n    message: string;\n    constructor(private formBuilder: FormBuilder) { }\n\n    ngOnInit() { \n        this.customer = {\n            firstName: 'Tina Reactive'\n        };\n\n        this.customerForm = this.formBuilder.group({\n            firstName: [this.customer.firstName, Validators.required ]\n        });\n    }\n\n    onSubmit(form: FormGroup) {\n        this.message = 'You typed: ' + form.controls.firstName.value;\n    }\n\n}","module.exports = \"<h1>Customer Edit Form By Mmayen Ewang</h1>\\n<form #starterForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div>\\n      First Name: <input type=\\\"text\\\" class=\\\"form-control\\\"\\n                       name=\\\"firstName\\\"\\n                       #firstName=\\\"ngModel\\\"\\n                       [(ngModel)]=\\\"customer.firstName\\\"\\n                       required />\\n      <span *ngIf=\\\"!firstName.valid\\\">First Name is required!</span>\\n    </div>\\n    <br />\\n    <div>\\n      Last Name: <input type=\\\"text\\\" class=\\\"form-control\\\"\\n      name=\\\"lastName\\\"\\n      #lastName=\\\"ngModel\\\"\\n      [(ngModel)]=\\\"customer.lastName\\\"\\n      required />\\n      <span *ngIf=\\\"!lastName.valid\\\">Last Name is required!</span>\\n    </div>\\n    <br />\\n    <div>\\n      Address: <input type=\\\"text\\\" class=\\\"form-control\\\"\\n      name=\\\"address\\\"\\n      #address=\\\"ngModel\\\"\\n      [(ngModel)]=\\\"customer.address\\\"\\n      required />\\n      <span *ngIf=\\\"!address.valid\\\">Address is required!</span>\\n    </div>\\n    <br />\\n    <div>\\n      City: <input type=\\\"text\\\" class=\\\"form-control\\\"\\n      name=\\\"city\\\"\\n      #city=\\\"ngModel\\\"\\n      [(ngModel)]=\\\"customer.city\\\"\\n      required />\\n      <span *ngIf=\\\"!city.valid\\\">City is required!</span>\\n    </div>\\n    <br />\\n    <div>\\n      Province: <input type=\\\"text\\\" class=\\\"form-control\\\"\\n      name=\\\"province\\\"\\n      #province=\\\"ngModel\\\"\\n      [(ngModel)]=\\\"customer.province\\\"\\n      required />\\n      <span *ngIf=\\\"!province.valid\\\">Province is required!</span>\\n    </div>\\n    <br />\\n    <div>\\n      Country: <input type=\\\"text\\\" class=\\\"form-control\\\"\\n      name=\\\"country\\\"\\n      #country=\\\"ngModel\\\"\\n      [(ngModel)]=\\\"customer.country\\\"\\n      required />\\n      <span *ngIf=\\\"!country.valid\\\">Country is required!</span>\\n    </div>\\n    <br />\\n    <div>\\n      Postal Code: <input type=\\\"text\\\" class=\\\"form-control\\\"\\n      name=\\\"postalCode\\\"\\n      #postalCode=\\\"ngModel\\\"\\n      [(ngModel)]=\\\"customer.postalCode\\\"\\n      required />\\n      <span *ngIf=\\\"!postalCode.valid\\\">Postal Code is required!</span>\\n    </div>\\n    <br />\\n    <div>\\n      Phone Number: <input type=\\\"tel\\\" class=\\\"form-control\\\"\\n      name=\\\"phoneNumber\\\"\\n      #phoneNumber=\\\"ngModel\\\"\\n      placeholder=\\\"333-444-2222\\\"\\n      [(ngModel)]=\\\"customer.phoneNumber\\\"\\n      pattern=\\\"^\\\\d{3}-\\\\d{3}-\\\\d{4}$ || ^\\\\d{10}$\\\"\\n      required />\\n      <span *ngIf=\\\"!phoneNumber.valid\\\">Phone Number is required!</span>\\n    </div>\\n    <br />\\n    <div>\\n      Email: <input type=\\\"email\\\" class=\\\"form-control\\\"\\n      name=\\\"email\\\"\\n      #email=\\\"ngModel\\\"\\n      [(ngModel)]=\\\"customer.email\\\"\\n      placeholder=\\\"email@example.com\\\"\\n      pattern=\\\"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$\\\"\\n      required />\\n      <span *ngIf=\\\"!email.valid\\\">Email is required!</span>\\n    </div>\\n    <br />\\n    <button class=\\\"btn btn-default\\\" [disabled]=\\\"!starterForm.valid\\\">Submit</button>\\n    <br /><br />\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">First Name: </span>{{ customer.firstName }}\\n    </div>\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">Last Name: </span>{{ customer.lastName }}\\n    </div>\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">Address: </span>{{ customer.address }}\\n    </div>\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">City: </span>{{ customer.city }}\\n    </div>\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">Province: </span>{{ customer.province }}\\n    </div>\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">Country: </span>{{ customer.country }}\\n    </div>\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">Postal Code: </span>{{ customer.postalCode }}\\n    </div>\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">Phone Number: </span>{{ customer.phoneNumber }}\\n    </div>\\n    <div *ngIf=\\\"starterForm.valid && formSubmitted\\\">\\n      <span style=\\\"font-weight: bold;\\\">Email: </span>{{ customer.email }}\\n    </div>\\n</form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'starter-template-form',\n    templateUrl: './starterTemplateForm.component.html'\n})\nexport class StarterTemplateFormComponent implements OnInit {\n    customer: any;\n    formSubmitted = false;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.customer = {};\n    }\n\n    onSubmit() {\n      this.formSubmitted = true;\n    }\n\n}","module.exports = \"<div class=\\\"container\\\">\\n  <div *ngIf=\\\"!submitted\\\">\\n    <h1>Template Driven Form</h1>\\n    <form (ngSubmit)=\\\"onSubmit()\\\" #heroForm=\\\"ngForm\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" #name=\\\"ngModel\\\" [(ngModel)]=\\\"model.name\\\" required>\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"name.valid\\\">Name is required</div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"alterEgo\\\">Alter Ego</label>\\n        <!-- \\n          Example of what things look like without [(ngModel)]=\\\"model.alterEgo\\\" \\n          \\n          <input type=\\\"text\\\" name=\\\"alterEgo\\\" [ngModel]=\\\"model.alterEgo\\\" (ngModelChange)=\\\"model.alterEgo=$event\\\" required>\\n        -->\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"alterEgo\\\" #alterEgo=\\\"ngModel\\\" [(ngModel)]=\\\"model.alterEgo\\\" required>\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"alterEgo.valid\\\">Alter Ego is required</div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"power\\\">Hero Power</label>\\n        <select class=\\\"form-control\\\" name=\\\"power\\\" #power=\\\"ngModel\\\" [(ngModel)]=\\\"model.power\\\" required>\\n          <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{ p }}</option>\\n        </select>\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"power.valid\\\">Power is required</div>\\n      </div>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button>\\n    </form>\\n  </div>\\n  <div *ngIf=\\\"submitted\\\">\\n    <h2>You submitted the following:</h2>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-2\\\">Name</div>\\n      <div class=\\\"col-md-10 pull-left\\\">{{ model.name }}</div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-2\\\">Alter Ego</div>\\n      <div class=\\\"col-md-10 pull-left\\\">{{ model.alterEgo }}</div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-2\\\">Power</div>\\n      <div class=\\\"col-md-10 pull-left\\\">{{ model.power }}</div>\\n    </div>\\n    <br />\\n    <button class=\\\"btn btn-default\\\" (click)=\\\"submitted=false\\\">Edit</button>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n//import { ShowError } from './showError.component';\nimport { Hero } from '../shared/hero';\n\n@Component({\n  selector: 'template-driven-form',\n  templateUrl: './templateForm.component.html'\n})\nexport class TemplateFormComponent implements OnInit {\n  model: Hero;  \n  powers: string[];\n  submitted: boolean = false;\n  \n  constructor() { }\n  \n  ngOnInit() {\n      this.model = new Hero(18, 'Tornado', 'Turbulent Breeze', 'Willie Wind');\n\n      this.powers = ['Really Smart', 'Turbulent Breeze', \n                     'Super Hot', 'Weather Changer'];\n  }\n\n  onSubmit() {\n    this.submitted = true;\n  }\n}","module.exports = \"<div class=\\\"container\\\">\\n    <!-- Template Form -->\\n    <div *ngIf=\\\"!templateSubmitted\\\">\\n      <h1>Using updateOn with Template Forms</h1>\\n      <!--Can add this if you want nothing to update until the form is submitted: [ngModelOptions]=\\\"{updateOn: 'submit'} -->\\n      <form (ngSubmit)=\\\"submit()\\\" #heroForm=\\\"ngForm\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"name\\\">Name (updateOn applied)</label>\\n          <!-- for updateOn you can pass 'blue' or 'submit' -->\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" #name=\\\"ngModel\\\" \\n                [(ngModel)]=\\\"model.name\\\" \\n                [ngModelOptions]=\\\"{updateOn: 'blur'}\\\" required> \\n          <div class=\\\"alert alert-danger\\\" [hidden]=\\\"name.valid\\\">Name is required</div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"alterEgo\\\">Alter Ego</label>\\n          <!-- \\n            Example of what things look like without [(ngModel)]=\\\"model.alterEgo\\\" \\n            \\n            <input type=\\\"text\\\" name=\\\"alterEgo\\\" [ngModel]=\\\"model.alterEgo\\\" (ngModelChange)=\\\"model.alterEgo=$event\\\" required>\\n          -->\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"alterEgo\\\" #alterEgo=\\\"ngModel\\\" \\n                [(ngModel)]=\\\"model.alterEgo\\\" required> \\n          <div class=\\\"alert alert-danger\\\" [hidden]=\\\"alterEgo.valid\\\">Alter Ego is required</div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"power\\\">Hero Power</label>\\n          <select class=\\\"form-control\\\" name=\\\"power\\\" \\n                  #power=\\\"ngModel\\\" [(ngModel)]=\\\"model.power\\\" required>\\n            <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{ p }}</option>\\n          </select>\\n          <div class=\\\"alert alert-danger\\\" [hidden]=\\\"power.valid\\\">Power is required</div>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button>\\n        <br /><br />\\n        <pre>\\n          {{ heroForm.value | json }}\\n        </pre>\\n      </form>\\n    </div>\\n    <div *ngIf=\\\"templateSubmitted\\\">\\n      <h2>You submitted the following:</h2>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-2\\\">Name</div>\\n        <div class=\\\"col-md-10 pull-left\\\">{{ model.name }}</div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-2\\\">Alter Ego</div>\\n        <div class=\\\"col-md-10 pull-left\\\">{{ model.alterEgo }}</div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-2\\\">Power</div>\\n        <div class=\\\"col-md-10 pull-left\\\">{{ model.power }}</div>\\n      </div>\\n      <br />\\n      <button class=\\\"btn btn-default\\\" (click)=\\\"templateSubmitted=false\\\">Edit</button>\\n    </div>\\n    <br />\\n\\n    <!-- Reactive Form -->\\n    <div *ngIf=\\\"!reactiveSubmitted\\\">\\n      <h1>Using updateOn with Reactive Forms</h1>\\n      <form [formGroup]=\\\"heroForm\\\" (ngSubmit)=\\\"reactiveSubmit()\\\">\\n          <div class=\\\"form-group\\\">\\n              <label for=\\\"name\\\">Name (updateOn applied)</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" /> \\n              <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.name.valid\\\">Name is required</div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n              <label for=\\\"alterEgo\\\">Alter Ego</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"alterEgo\\\" /> \\n              <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.alterEgo.valid\\\">Alter Ego is required</div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n              <label for=\\\"email\\\">Hero Email</label>\\n              <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" /> {{ heroForm.controls.email.value }}\\n              <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.email.valid\\\">Email is required and must be a valid email pattern</div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n              <label for=\\\"power\\\">Hero Power</label>\\n              <select class=\\\"form-control\\\" formControlName=\\\"power\\\">\\n                <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{p}}</option>\\n              </select>\\n              <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.power.valid\\\">Power is required</div>\\n          </div>\\n          <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button> \\n          <br /><br />\\n          <pre>\\n            {{ heroForm.value | json }}\\n          </pre>\\n      </form>  \\n  </div>\\n                              \\n  <div *ngIf=\\\"reactiveSubmitted\\\">\\n      <h2>You submitted the following:</h2>\\n      <div class=\\\"row\\\">\\n          <div class=\\\"col-md-2\\\">Name</div>\\n          <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.name }}</div>\\n      </div>\\n      <div class=\\\"row\\\">\\n          <div class=\\\"col-md-2\\\">Alter Ego</div>\\n          <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.alterEgo }}</div>\\n      </div>\\n      <div class=\\\"row\\\">\\n          <div class=\\\"col-md-2\\\">Hero Email</div>\\n          <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.email }}</div>\\n      </div>\\n      <div class=\\\"row\\\">\\n          <div class=\\\"col-md-2\\\">Power</div>\\n          <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.power }}</div>\\n      </div>\\n      <br />\\n      <button class=\\\"btn btn-default\\\" (click)=\\\"reactiveSubmitted=false\\\">Edit</button>\\n  </div>  \\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { Hero } from '../shared/hero';\nimport { Validators, FormGroup, FormBuilder, FormControl } from '@angular/forms';\nimport { ValidationService } from '../shared/validation.service';\n\n@Component({\n    selector: 'update-on-form',\n    templateUrl: './updateOn.component.html'\n})\nexport class UpdateOnComponent implements OnInit {\n    model: Hero;  \n    submittedModel: Hero; \n    heroForm: FormGroup;\n    powers: string[];\n    templateSubmitted = false;\n    reactiveSubmitted = false;\n    \n    constructor(private formBuilder: FormBuilder) { }\n    \n    ngOnInit() {\n        this.model = new Hero(18, 'Dr IQ', 'Really Smart', 'Chuck Overstreet', 'iq@superhero.com');\n  \n        this.powers = ['Really Smart', 'Turbulent Breeze', \n                       'Super Hot', 'Weather Changer'];\n\n        //This currently doesn't work when using FormBuilder to create a FormGroup that has updateOn\n        //https://github.com/angular/angular/issues/19163\n        // this.heroForm = this.formBuilder.group({\n        //     //Can individually add updateOn to FormControls\n        //     //name:     [this.model.name, { validators: Validators.required, updateOn: 'blur' }],\n        //     name:     [this.model.name, Validators.required ],\n        //     alterEgo: [this.model.alterEgo, Validators.required],\n        //     email:    [this.model.email, [Validators.required, ValidationService.emailValidator]],\n        //     power:    [this.model.power, Validators.required]\n        // }, { updateOn: 'blur' });\n\n        this.heroForm = new FormGroup({\n            //Can individually add updateOn to FormControls\n            //name:   new FormControl(this.model.name, { validators: Validators.required, updateOn: 'blur' }),\n            name:     new FormControl(this.model.name, Validators.required ),\n            alterEgo: new FormControl(this.model.alterEgo, Validators.required),\n            email:    new FormControl(this.model.email, { validators: [Validators.required, ValidationService.emailValidator] }),\n            power:    new FormControl(this.model.power, Validators.required)\n        }, { updateOn: 'blur' });\n    }\n\n    updateOnForAll() {\n        //this.heroForm.setValue({ updateOn: 'blue'});\n    }\n  \n    submit() {\n      this.templateSubmitted = true;\n    }\n\n    reactiveSubmit() {\n        this.reactiveSubmitted = true;\n        this.submittedModel = this.heroForm.value;\n      }\n\n}","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}